#pragma GCC optimize(3, "Ofast", "inline")
#include <iostream>
#include <bits/stdc++.h>
#define IOS ios::sync_with_stdio(false), cin.tie(0), cout.tie(0)
#define INF 0x3f3f3f3f
#define db cout << "debug\n";

using namespace std;
const int Mod = 998244353;
using ll = long long;
struct node//这里的l，r是左右儿子
{
    int l = 0;
    int r = 0;
    ll sum = 0;
    ll last = 0;//懒标记
} tr[1000005 * 30];

int tot = 1;
void pushup(int x)
{
    tr[x].sum = tr[tr[x].l].sum + tr[tr[x].r].sum;
}
void pushdown(int x, int l, int r)
{
    if (tr[x].l == 0)
        tr[x].l = ++tot;
    if (tr[x].r == 0)
        tr[x].r = ++tot;
    if (tr[x].last != 0)
    {
        int mid = l + r >> 1;
        int lson = tr[x].l;
        int rson = tr[x].r;
        int p = tr[x].last;
        tr[lson].sum += 1LL * (mid - l + 1) * p;
        tr[rson].sum += 1LL * (r - mid) * p;
        tr[lson].last += p;
        tr[rson].last += p;
        tr[x].last = 0;
    }
}
void update(int k, int l, int r, int x, int y, int c)
{
    pushdown(k, l, r);//先开点
    //  cout << k << ' ' << l << " " << r << '\n';
    if (r < x || l > y)
    {
        return;
    }
    if (x <= l && r <= y)
    {
        tr[k].sum += 1LL * (r - l + 1) * c;
        // cout << k << ' ' << l << ' ' << r << ' ' << tr[x].sum<< '\n';
        tr[k].last += c;
        return;
    }
    int mid = l + r >> 1;
    update(tr[k].l, l, mid, x, y, c);
    update(tr[k].r, mid + 1, r, x, y, c);
    pushup(k);
    return;
}
ll query(int k, int l, int r, int x, int y)
{
    pushdown(k, l, r);
    if (r < x || l > y)
        return 0;
    if (x <= l && r <= y)
    {
        return tr[k].sum;
    }
    int mid = l + r >> 1;

    return (query(tr[k].l, l, mid, x, y) +
            query(tr[k].r, mid + 1, r, x, y));
}
void solve()
{
    int n, m;
    cin >> n >> m;

    while (m--)
    {
        int opt;
        cin >> opt;
        if (opt == 1)
        {
            int l, r;
            int c;
            cin >> l >> r >> c;
            update(1, 1, n, l, r, c);
        }
        else
        {
            int l, r;
            cin >> l >> r;
            cout << query(1, 1, n, l, r) << '\n';
        }
    }
}
int  main()
{
    IOS;
    int t = 1;
    //  cin>>t;
    while (t--)
    {
        solve();
    }
    return 0;
}

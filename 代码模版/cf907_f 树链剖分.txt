/*
邻接表的清空
memset太慢
sum、last要清空到4*n

离线建树
*/
/*
题意:
一开始只有一个点1
有q个操作
第一种操作: 在节点x下新增加一个节点并且编号为size+1 size为增加前的节点个数。
第二种操作: 读入x，和s，在x节点和其所有子树上每个节点加上s。
*/

#include <iostream>
#include <bits/stdc++.h>
#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)
#define ll long long
#define int long long
using namespace std;
const int N=5e5+10;
struct node{
    int opt,x,y;
};
 inline int  read()
{
int x=0,f=1;
char ch=getchar();
while(ch<'0'||ch>'9')
{
if(ch=='-')
f=-1;
ch=getchar();
}
while(ch>='0' && ch<='9')
x=x*10+ch-'0',ch=getchar();
return x*f;
}
vector<int> e[N];
int fa[N],depth[N],siz[N];
int son[N],top[N],t;
int id[N],rev[N];
int sum[4*N];
int last[4*N];
void add(int u,int v)
{
    e[u].emplace_back(v);
    e[v].emplace_back(u);
}
void dfs1(int u,int dad)
{
    siz[u]=1;
    fa[u]=dad;
    depth[u]=depth[dad]+1;
    for(auto v:e[u])
    {
        if(v==dad)continue;
        dfs1(v,u);
        siz[u]+=siz[v];
        if(siz[v]>siz[son[u]]) son[u]=v;
    }
}
void dfs2(int u,int dad)
{
    int v=son[u];
    if(v)
    {
        id[v]=++t;
        top[v]=top[u];
        rev[t]=v;
        dfs2(v,u);
    }
    for(auto v:e[u])
    {
        if(!top[v])
        {
            id[v]=++t;
            top[v]=v;
            rev[t]=v;
            dfs2(v,u);
        }
    }
}
void built(int k,int l,int r)
{
    if(l==r) {
        last[k]=0;
        sum[k]=0;return ;
    }
    int mid=l+r>>1;
    built(k<<1,l,mid);
    built(k<<1|1,mid+1,r);
    sum[k]=sum[k<<1|1]+sum[k];
}
void pushdown(int k,int l,int r)
{
    if(last[k])
    {
        int mid=l+r>>1;
        sum[k<<1]+=(mid-l+1)*last[k];
        sum[k<<1|1]+=(r-mid)*last[k];
        last[k<<1]+=last[k];
        last[k<<1|1]+=last[k];
        last[k]=0;
    }
}
void update(int k,int l,int r,int x,int y,int p)
{
    if(l>y||r<x) return;
    if(l>=x&&r<=y)
    {
        sum[k]+=(r-l+1)*p;
        last[k]+=p;
        return ;
    }
    int mid=l+r>>1;
    pushdown(k,l,r);
    if(x<=mid)update(k<<1,l,mid,x,y,p);
    if(y>=mid+1)update(k<<1|1,mid+1,r,x,y,p);
    sum[k]=sum[k<<1]+sum[k<<1|1];
}
int query(int k,int l,int r,int x,int y)
{
    if(r<x||l>y) return 0;
    if(l>=x&&r<=y)
    {
        return sum[k];
    }
    int mid=l+r>>1;
    pushdown(k,l,r);
    return query(k<<1,l,mid,x,y)+query(k<<1|1,mid+1,r,x,y);
} 
vector<node> q(N);
void solve()
{
   int n=1;
    t=0;
    int ns;
    ns=read();
    
for(int i =0;i<=ns;i++)
{
    q[i]={};
}
    for(int i =0;i<ns;i++)
    {
        int opt;
        opt=read();
        if(opt==1)
        {
            int c;c=read();
            q[i]={opt,c,-1};
        }
        else{
            int x,y;
            x=read();
            y=read();
            q[i]={opt,x,y};
        }
    }
    for(int i =0;i<ns;i++)
    {
        node tt=q[i];
        if(tt.opt==2)continue;
        else if(tt.opt==1)
        {
            int u=tt.x;
            n++;
            add(u,n);
        }
    }
    dfs1(1,0);
    id[1]=++t;
    top[1]=1;
    rev[1]=1;
    dfs2(1,0);
    built(1,1,n);
    vector<int>ans(n+1);
    vector<int>vis(n+1);
    for(int i =ns-1;i>=0;i--)
    {
        node tt=q[i];
        if(tt.opt==1)
        {
            int pos=q[i].x;
            int mx=-1;
            mx=e[pos][e[pos].size()-1];
            e[pos].pop_back();
            vis[mx]=1;
            ans[mx]=query(1,1,n,id[mx],id[mx]);
        }
        else if(tt.opt==2)
        {
             int x,p;
            x=tt.x;
            p=tt.y;
            update(1,1,n,id[x],id[x]+siz[x]-1,p);
        }
    }
    for(int i =1;i<=n;i++)
    {
        if(vis[i]==1)
        {
            printf("%lld ",ans[i]);
        }
        else{
            int ss=query(1,1,n,id[i],id[i]);
            printf("%lld ",ss);
        }
    }
   printf("\n");   

    for (int i = 0; i <= n; i ++) {
       e[i]={};

        top[i] = depth[i] = siz[i] = son[i] = fa[i] = id[i] = rev[i] = 0;
    }
    for(int i =0;i<=4*n;i++)
    {
        sum[i]=0;
        last[i]=0;
    }
}
signed main()
{
    
    int _;
_=read();
    while(_--)
    {
        solve();
    }
    return 0;
}

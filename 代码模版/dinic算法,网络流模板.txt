#include <iostream>
#include <bits/stdc++.h>
#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)
const int N=3020000;
const int  inf=0x3f3f3f3f;
int s,t,n,m,x,y,z,depth[N];
long long maxflow;
using namespace std;

struct Edge
{
	int nxt,to,w;
}e[N];
int cnt=-1,head[N],cur[N];
queue<int> q;
void add(int u,int to,int w)
{
	e[++cnt].nxt=head[u];
	e[cnt].to=to;
	e[cnt].w=w;
	head[u]=cnt;
}
bool bfs(int s,int t)
{
	for(int i =0;i<=n+1;i++) depth[i]=inf;
	for(int i =1;i<=n;i++) cur[i]=head[i]; 
	depth[s]=0;
	q.push(s);
	while(!q.empty())
	{
		int u=q.front();
		q.pop();
		for(int i =head[u];i!=-1;i=e[i].nxt)
		{
			int v=e[i].to;
			if(depth[v]==inf&&e[i].w)
			{
				depth[v]=depth[u]+1;
				q.push(v);
			}
		}
	}
	if(depth[t]<inf) return 1;
	return 0;

}
int dfs(int u,int limit)
{
	if(!limit||u==t) return limit;
	int flow=0;
	int f;
	for(int i=cur[u];i!=-1;i=e[i].nxt)//弧优化——被榨干的线路就不再访问
	{
		cur[u]=i;//
		int to=e[i].to;
		if(depth[to]==depth[u]+1&&e[i].w)
		{
			f=dfs(to,min(limit,e[i].w));
			flow+=f;
			limit-=f;
			e[i].w-=f;
			e[i^1].w+=f;
			if(!limit) break;
		}
	}
return flow;

}
void dinic(int S,int T)
{
	while(bfs(S,T))
	{
		maxflow+=dfs(S,inf);
	}
}
int main()
{
	memset(head,-1,sizeof head);
	scanf("%d%d%d%d",&n,&m,&s,&t);
	for(int i =1;i<=m;i++)
	{
		scanf("%d%d%d",&x,&y,&z);
		add(x,y,z);
		add(y,x,0);//反向边，撤销之前的错误
	}
	dinic(s,t);
	printf("%lld",maxflow);
	return 0;
}

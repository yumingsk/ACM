//hdu城市覆盖
#include <iostream>
#include <bits/stdc++.h>
#define i64 long long
using namespace std;
const i64 inf=10000000000;
i64 cost[100005];
vector<int> e[100005];
i64 dp[100005][3];//0代表未覆盖,2代表其中有至少一个儿子节点是选中来覆盖父节点，1代表自身就是被选中的节点
int vis[100005];

void add(i64 &x,i64 y)
{
    x+=y;
    if(x>inf) x=inf;
}
void dfs(int u,int fa)
{
        dp[u][1]=inf;
        dp[u][0]=0;
        dp[u][2]=cost[u];

    for(auto v:e[u])
    {
        if(v==fa) continue;
            dfs(v,u);
            dp[u][1]=min(dp[u][1]+min(dp[v][1],dp[v][2]),dp[u][0]+dp[v][2]);
            add(dp[u][2],min(dp[v][0],min(dp[v][1],dp[v][2])));
            add(dp[u][0],dp[v][1]);
    }
}
int main()
{
cin.tie(0);
int t;
cin>>t;
while(t--){
	memset(dp,0,sizeof dp);
	for(int i =0;i<=10000;i++)
	{
		e[i].clear();
	}
     int n;
     cin>>n;
     for(int i =1;i<=n;i++)cin>>cost[i];
     for(int i =1;i<n;i++)
     {
        int u,v;
        cin>>u>>v;
        e[u].push_back(v);
        e[v].push_back(u);
     }
     dfs(1,1);
     i64 ans=min(dp[1][1],dp[1][2]);
     cout<<ans<<"\n";
}

    return 0;
}
//-----------------------------------------------------------------
std:
#include<cstdio>
#include<cstring>
#include<algorithm>
#define M 1000005
#define INF 100000000000000
using namespace std;
struct E{
	int to,nx;
}edge[M<<1];
int tot,head[M];
void Addedge(int a,int b){
	edge[++tot].to=b;
	edge[tot].nx=head[a];
	head[a]=tot;
}
long long dp[M][3];
int fa[M];
int A[M];
inline void Add(long long &x,long long y){
	x+=y;
	if(x>=INF)x=INF;
}
void dfs(int now){
	dp[now][0]=dp[now][1]=dp[now][2]=0;
	dp[now][1]=A[now];dp[now][2]=INF;
	for(int i=head[now];i;i=edge[i].nx){
		int nxt=edge[i].to;
		if(nxt==fa[now])continue;
		fa[nxt]=now;
		dfs(nxt);
		dp[now][2]=min(dp[now][2]+min(dp[nxt][1],dp[nxt][2]),dp[now][0]+dp[nxt][1]);
		Add(dp[now][1],min(dp[nxt][0],min(dp[nxt][1],dp[nxt][2])));
		Add(dp[now][0],dp[nxt][2]);
	}
}
int main(){
	int T;
	scanf("%d",&T);
	while(T--){
		int n;
		scanf("%d",&n);
		memset(head,0,sizeof(head));
		tot=0;for(int i=1;i<=n;i++)head[i]=0;
		for(int i=1;i<=n;i++)scanf("%d",&A[i]);
		for(int i=1;i<n;i++){
			int a,b;
			scanf("%d%d",&a,&b);
			Addedge(a,b);
			Addedge(b,a);
		}
		dfs(1);
		long long ans=min(dp[1][1],dp[1][2]);
		printf("%lld\n",ans);
	}
	return 0;
}
//--------------------------------------------------



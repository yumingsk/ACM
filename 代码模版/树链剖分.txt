#include<bits/stdc++.h>
#define N 200100
using namespace std;
#define IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)

vector<int> e[N];
int n,m;
int fa[N],depth[N],siz[N];
int w[N];//通过树链剖分把w数组搞连续。
int son[N],top[N];
int id[N],rev[N],t;
int sum[2*N],Max[2*N];//线段树
int ans_sum,ans_max;

void add(int u,int v)
{
    e[u].push_back(v);
    e[v].push_back(u);
}
void dfs1(int u,int dad)
{
    siz[u]=1;
    fa[u]=dad;
    depth[u]=depth[dad]+1;
    for(auto v:e[u])
    {
        if(v==dad)continue;
        dfs1(v,u);
        siz[u]+=siz[v];
        if(siz[v]>siz[son[u]]) son[u]=v;
    }
}
void dfs2(int u,int dad)
{
    int v=son[u];
    if(v)
    {
        id[v]=++t;
        top[v]=top[u];
        rev[t]=v;
        dfs2(v,u);
    }
    for(auto v:e[u])
    {
        if(!top[v])
        {
            id[v]=++t;
            top[v]=v;
            rev[t]=v;
            dfs2(v,u);
        }
    }
}
void built(int k,int l,int r)
{
    if(l==r) {Max[k]=sum[k]=w[rev[l]];return;}
    int mid=(l+r)>>1;
    built(k<<1,l,mid),built(k<<1|1,mid+1,r);
    sum[k]=sum[k<<1]+sum[k<<1|1];
    Max[k]=max(Max[k<<1],Max[k<<1|1]);
}
void change(int k,int l,int r,int x,int v)//单点修改
{
    if(l>r) return ;
    if(l==r&&x==l){
        sum[k]=Max[k]=v;return ;
    }
    int mid=l+r>>1;
    if(x>=l&&x<=mid) change(k<<1,l,mid,x,v);
    if(x>=mid+1&&x<=r) change(k<<1|1,mid+1,r,x,v);
    sum[k]=sum[k<<1]+sum[k<<1|1];
    Max[k]=max(Max[k<<1],Max[k<<1|1]);
}
void query(int k,int l,int r,int x,int y)
{
    if(x>r||y<l) return ;
    if(x<=l&&r<=y)
    {
        ans_sum+=sum[k];
        ans_max=max(ans_max,Max[k]);
        return ;
    }
    int mid=l+r>>1;
    if(x<=mid) query(k<<1,l,mid,x,y);
    if(y>=mid+1)query(k<<1|1,mid+1,r,x,y);
}
void ask(int u,int v)
{
    int fu=top[u],fv=top[v];
    while(fu!=fv)
    {
        if(depth[fu]<depth[fv])
        {
            swap(u,v);
            swap(fu,fv);
        }
        query(1,1,n,id[fu],id[u]);//访问fu->u;
        u=fa[fu];
        fu=top[u];
    }
    if(depth[u]>depth[v])swap(u,v);
    query(1,1,n,id[u],id[v]);
}
int main()
{
    IOS;
    cin>>n;
    int x,y;
    for(int i =1;i<n;i++)
    {
        cin>>x>>y;
        add(x,y);
    }
    for(int i =1;i<=n;i++)
    {
        cin>>w[i];
    }
    int m;
    cin>>m;
    dfs1(1,0);
    id[1]=++t;
    top[1]=1;
    rev[1]=1;
    dfs2(1,0);
    built(1,1,n);
    char s[10];
    for(int i =1;i<=m;i++)
    {
        cin>>s;
        cin>>x>>y;
        if(s[0]=='C') change(1,1,n,id[x],y);
        else
        {
            ans_sum=0;
            ans_max=0x80000000;
            ask(x,y);
             if(s[0]=='Q'&&s[1]=='M')   cout<<ans_max<<"\n";
            if(s[0]=='Q'&&s[1]=='S')  cout<<ans_sum<<"\n";
        }
        
    }
    return 0;
}
template <class T>
struct MinCostFlow {
    struct Edge {
        int v, c;
        T f;
        Edge(int v, int c, T f) : v(v), c(c), f(f) {}
    };
    int n;
    vector<Edge> e;
    vector<vector<int>> g;
    vector<T> h, dis;
    vector<int> pre;
    vector<T> p;
    bool dijkstra(int s, int t) {
        dis.assign(n, numeric_limits<T>::max());
        pre.assign(n, -1);
        priority_queue<pair<T, int>, vector<pair<T, int>>, greater<>> que;
        dis[s] = 0;
        que.emplace(0, s);
        while (!que.empty()) {
            auto [d, u] = que.top();
            que.pop();
            if (dis[u] != d) continue;
            for (int &i : g[u]) {
                auto [v, c, f] = e[i];
                if (c > 0 && dis[v] > d + h[u] - h[v] + f) {
                    dis[v] = d + h[u] - h[v] + f;
                    pre[v] = i;
                    que.emplace(dis[v], v);
                }
            }
        }
        return dis[t] != numeric_limits<T>::max();
    }
    MinCostFlow(const int &n = 0) : n(n), g(n) {}
    void addEdge(int u, int v, int c, T f) {
        g[u].push_back(e.size());
        e.emplace_back(v, c, f);
        g[v].push_back(e.size());
        e.emplace_back(u, 0, -f);
    }
    pair<int, T> maxflow(int s, int t) {
        int flow = 0;
        T cost = 0;
        h.assign(n, 0);
        
        for (int i = 0; i < n; i++) {
            for (auto &j : g[i]) {
                if (e[j].v > i) {
                    h[e[j].v] = min(h[e[j].v], h[i] + e[j].f);
                }
            }
        }
        T res = 0;
        while (dijkstra(s, t)) {
            for (int i = 0; i < n; ++i) {
                h[i] += dis[i];
            }
            int aug = numeric_limits<int>::max();
            for (int i = t; i != s; i = e[pre[i] ^ 1].v) {
                aug = min(aug, e[pre[i]].c);
            }
            for (int i = t; i != s; i = e[pre[i] ^ 1].v) {
                e[pre[i]].c -= aug;
                e[pre[i] ^ 1].c += aug;
            }
            flow += aug;
            p.push_back(aug * h[t]);
            cost += aug * h[t];
        }
        return {flow, cost};
    }
};
